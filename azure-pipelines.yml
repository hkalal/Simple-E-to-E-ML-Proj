
trigger:
- main

pool: AzureAgentPool

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
     - job: 
       steps:
       
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Programming'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
          displayName: "ZIPing source files"

        - task: CmdLine@2
          inputs:
            script: |
              echo Write your commands here
              rmdir /s /Q $(Pipeline.Workspace)\drop-Artifacts
              echo Hello world
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop-Artifacts'
            publishLocation: 'Container'
          displayName: "Publish-Build-Artifacts"
          

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      name: AzureAgentPool
    environment: class16July2024
    strategy:
      runOnce: 
        deploy:
          steps:
          
          - task: CmdLine@2
            inputs:
              script: |
                echo Write your commands here
                rmdir /s /Q 'c:\deployment\'
                echo Hello world
          

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Pipeline.Workspace)\drop-Artifacts'
              Contents: '**'
              TargetFolder: 'c:\deployment\'
              CleanTargetFolder: true
              OverWrite: true
              flattenFolders: true
              preserveTimestamp: true
              ignoreMakeDirErrors: true
  
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $zipFolder = "C:\Deployment\"  # Folder where the zip file is located
                $zipFile = Get-ChildItem -Path $zipFolder -Filter "*.zip" -File | Select-Object -First 1  # Find the first zip file

                if ($zipFile) {
                    $destination = $zipFolder  # Unzipping in the same folder
                    Write-Host "Found zip file: $($zipFile.FullName)"
                    
                    # Unzip the file into the same folder
                    Expand-Archive -Path $zipFile.FullName -DestinationPath $destination -Force
                    Write-Host "Unzipped $($zipFile.FullName) to $destination"
                } else {
                    Write-Host "No zip file found in $zipFolder"
                }
                #DISM /Online /Enable-Feature /FeatureName:IIS-WebServerRole /All
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Check if running as an administrator
                $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
                if (-not $isAdmin) {
                    Write-Host "Script is not running with administrator privileges."
                    exit 1  # Fail the task if admin rights are required
                } else {
                    Write-Host "Running with administrator privileges."
                }

                # Your IIS management script goes here
                $siteName = "MyApp"
                $appName = "MyWebApp"
                $physicalPath = "C:\inetpub\wwwroot\MyWebApp"
                $appPoolName = "MyAppPool"

                Import-Module WebAdministration

                # Check if the site exists
                $site = Get-Website -Name $siteName -ErrorAction SilentlyContinue
                if ($site -eq $null) {
                    New-Website -Name $siteName -Port 80 -PhysicalPath "C:\inetpub\wwwroot\$siteName" -ApplicationPool $appPoolName
                    Write-Host "IIS website '$siteName' created successfully."
                } else {
                    Write-Host "IIS website '$siteName' already exists."
                }

                # Ensure the application pool exists
                $appPool = Get-Item "IIS:\AppPools\$appPoolName" -ErrorAction SilentlyContinue
                if ($appPool -eq $null) {
                    New-Item "IIS:\AppPools\$appPoolName"
                    Write-Host "Application pool '$appPoolName' created successfully."
                } else {
                    Write-Host "Application pool '$appPoolName' already exists."
                }

                # Check if the application exists
                $app = Get-WebApplication -Site $siteName -Name $appName -ErrorAction SilentlyContinue
                if ($app -eq $null) {
                    New-WebApplication -Site $siteName -Name $appName -PhysicalPath $physicalPath -ApplicationPool $appPoolName
                    Write-Host "IIS application '$appName' created successfully."
                } else {
                    Set-ItemProperty "IIS:\Sites\$siteName\$appName" -Name physicalPath -Value $physicalPath
                    Write-Host "IIS application '$appName' updated successfully."
                }
                
                # Set the application pool to use .NET CLR v4.0
                Set-ItemProperty "IIS:\AppPools\$appPoolName" -Name "managedRuntimeVersion" -Value "v4.0"

                Write-Host "IIS application management task completed successfully."
