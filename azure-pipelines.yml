
#trigger:
#- main

pool: AzureAgentPool

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
     - job: 
       steps:
       
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Programming'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
          displayName: "ZIPing source files"

        - task: CmdLine@2
          inputs:
            script: |
              echo Write your commands here
              rmdir /s /Q $(Pipeline.Workspace)\drop-Artifacts
              echo Hello world
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop-Artifacts'
            publishLocation: 'Container'
          displayName: "Publish-Build-Artifacts"
          

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      name: AzureAgentPool
    environment: class16July2024
    strategy:
      runOnce: 
        deploy:
          steps:
          
          - task: CmdLine@2
            inputs:
              script: |
                echo Write your commands here
                rmdir /s /Q 'c:\TestFlaskDeployment\'
                echo Hello world
          

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Pipeline.Workspace)\drop-Artifacts'
              Contents: '**'
              TargetFolder: 'c:\TestFlaskDeployment\'
              CleanTargetFolder: true
              OverWrite: true
              flattenFolders: true
              preserveTimestamp: true
              ignoreMakeDirErrors: true
  
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $zipFolder = "C:\TestFlaskDeployment\"  # Folder where the zip file is located
                $zipFile = Get-ChildItem -Path $zipFolder -Filter "*.zip" -File | Select-Object -First 1  # Find the first zip file

                if ($zipFile) {
                    $destination = $zipFolder  # Unzipping in the same folder
                    Write-Host "Found zip file: $($zipFile.FullName)"
                    
                    # Unzip the file into the same folder
                    Expand-Archive -Path $zipFile.FullName -DestinationPath $destination -Force
                    Write-Host "Unzipped $($zipFile.FullName) to $destination"
                } else {
                    Write-Host "No zip file found in $zipFolder"
                }

          - task: CmdLine@2
            inputs:
              script: |
                echo Write your commands here
                
                  cd "C:\TestFlaskDeployment\"

                  set envvar=env-$(Build.BuildId)
      
                  Python -m venv %envvar%

                  pip install wfastcgi

                  call %envvar%\Scripts\activate.bat

                  pip install -r requirements.txt
                  echo Hello world
               
          - task: IISWebAppManagementOnMachineGroup@0
            inputs:
              IISDeploymentType: 'IISWebsite'
              ActionIISWebsite: 'CreateOrUpdateWebsite'
              WebsiteName: 'TestFlaskDeployment'
              WebsitePhysicalPath: 'C:\TestFlaskDeployment'
              WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'
              AddBinding: true
              Bindings: |
                {
                   "bindings":[{
                                  "protocol":"http",
                                  "ipAddress":"*",
                                  "port":"1515",
                                  "sslThumbprint":"",
                                  "sniFlag":false 
                              }]
                }                                     
              CreateOrUpdateAppPoolForWebsite: true
              AppPoolNameForWebsite: 'TestFlaskDeployment-app-pool'
              DotNetVersionForWebsite: 'No Managed Code'
              PipeLineModeForWebsite: 'Integrated'
              AppPoolIdentityForWebsite: 'ApplicationPoolIdentity'
              


          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                # Define paths and environment variables
                  $pythonPath = "C:\Python312\python.exe"
                  $wfastcgiScript = "C:\Python312\Lib\site-packages\wfastcgi.py"
                  $physicalPath = "C:\TestFlaskDeployment"  # Update this to your actual application path
                  $siteName = "TestFlaskDeployment"

                  # Register the FastCGI application globally
                  $fastCgiAppPath = "MACHINE/WEBROOT/APPHOST"
                  Write-Host Get-Website

                  # Update WSGI Handler
                  Set-WebConfigurationProperty -pspath "$fastCgiAppPath/$siteName/" -filter "system.webServer/handlers" -name "." -value @{
                      name = 'Python FastCGI'
                      path = "*"
                      verb = "*"
                      modules = "FastCgiModule"
                      scriptProcessor = "$pythonPath|$wfastcgiScript"
                      resourceType = "Either"
                      requireAccess = "Script"
                  }

                  # Check if FastCGI application already exists
                  $existingFastCgi = Get-WebConfiguration -pspath $fastCgiAppPath -filter "system.webServer/fastCgi/application[@fullPath='$pythonPath']" -ErrorAction SilentlyContinue

                  if (-not $existingFastCgi) {
                      # If it does not exist, create the FastCGI application
                      Add-WebConfigurationProperty -pspath $fastCgiAppPath -filter "system.webServer/fastCgi" -name "." -value @{
                          fullPath = $pythonPath
                          arguments = "$wfastcgiScript"
                          maxInstances = 10
                          idleTimeout = 300  # Just a number, no quotes
                          activityTimeout = 60
                          requestTimeout = 90
                          instanceMaxRequests = 10000
                          protocol = "NamedPipe"
                      }

                      # Initialize environment variables as a collection
                      Add-WebConfigurationProperty -pspath $fastCgiAppPath -filter "system.webServer/fastCgi/application[@fullPath='$pythonPath']" -name "environmentVariables" -value @{ name="x"; value="x" }
                  }

                  # Updating existing FastCGI application settings
                  try {
                      # Update existing FastCGI application settings
                      $appPath = "system.webServer/fastCgi/application[@fullPath='$pythonPath']"

                      # Set properties with proper value assignments
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "arguments" -value "$wfastcgiScript"
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "maxInstances" -value 10
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "idleTimeout" -value 300  # No quotes needed
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "activityTimeout" -value 60
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "requestTimeout" -value 90
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "instanceMaxRequests" -value 10000
                      Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$appPath" -name "protocol" -value "NamedPipe"

                      # Ensure the environmentVariables section is initialized before adding values
                      $envVarsPath = "system.webServer/fastCgi/application[@fullPath='$pythonPath']/environmentVariables"
                      if (-not (Get-WebConfiguration -pspath $fastCgiAppPath -filter $envVarsPath -ErrorAction SilentlyContinue)) {
                          Add-WebConfigurationProperty -pspath $fastCgiAppPath -filter $envVarsPath -name "." -value @{ name=""; value="" }
                      }

                      # Now add or update the environment variables
                      $envVars = @(
                          @{ name = "WSGI_HANDLER"; value = "flaskIIS.app" },
                          @{ name = "PYTHONPATH"; value = $physicalPath }
                      )

                      foreach ($envVar in $envVars) {
                          $name = $envVar.name
                          $value = $envVar.value

                          # Check if the environment variable already exists
                          $existingEnvVar = Get-WebConfiguration -pspath $fastCgiAppPath -filter "$envVarsPath/environmentVariable[@name='$name']" -ErrorAction SilentlyContinue

                          if (-not $existingEnvVar) {
                              # If it does not exist, add it
                              Add-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$envVarsPath" -name "." -value @{
                                  name = $name
                                  value = $value
                              }
                          } else {
                              # If it exists, update the existing variable
                              Set-WebConfigurationProperty -pspath $fastCgiAppPath -filter "$envVarsPath/environmentVariable[@name='$name']" -name "value" -value $value
                          }
                      }

                  } catch {
                      Write-Error "An error occurred while updating the FastCGI application: $_"
                  }

                Write-Host "Hello World"